#include <Arduino.h>
#include <micro_ros_platformio.h>
#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <std_msgs/msg/int32.h>

rcl_publisher_t publisher;
std_msgs__msg__Int32 send_msg;

rcl_subscription_t subscriber;
std_msgs__msg__Int32 recv_msg;
rclc_executor_t executor;
rcl_node_t node;
rclc_support_t support;
rcl_allocator_t allocator;

#define LED_PIN 2

void subscription_callback(const void * msgin) {
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
  Serial.print("Received PWM value: ");
  Serial.println(msg->data);
  int pwm = constrain(msg->data, 0, 255);
  ledcWrite(0, pwm);
  // Send feedback back to host
  send_msg.data = pwm;
  rcl_publish(&publisher, &send_msg, NULL);
}

void setup() {
  Serial.begin(115200);
  set_microros_serial_transports(Serial);  // Correct usage
  delay(2000);

  ledcSetup(0, 5000, 8);
  ledcAttachPin(LED_PIN, 0);

  allocator = rcl_get_default_allocator();
  rclc_support_init(&support, 0, NULL, &allocator);
  rclc_node_init_default(&node, "esp32_pwm_sub_node", "", &support);

  rclc_subscription_init_default(
    &subscriber, &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "led_pwm"
  );
  rclc_publisher_init_default(
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "led_pwm_feedback"  // New topic name for feedback
  );


  rclc_executor_init(&executor, &support.context, 1, &allocator);
  rclc_executor_add_subscription(
    &executor, &subscriber, &recv_msg,
    &subscription_callback, ON_NEW_DATA
  );
}

void loop() {
  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
}
